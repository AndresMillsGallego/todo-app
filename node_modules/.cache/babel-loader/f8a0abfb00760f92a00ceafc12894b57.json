{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends, __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/** @deprecated use `PanelStack2<T>` */\n\nvar PanelStack =\n/** @class */\nfunction (_super) {\n  __extends(PanelStack, _super);\n\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : _this.props.initialPanel !== undefined ? [_this.props.initialPanel] : []\n    };\n\n    _this.renderPanel = function (panel, index) {\n      var _a = _this.props,\n          renderActivePanelOnly = _a.renderActivePanelOnly,\n          _b = _a.showPanelHeader,\n          showPanelHeader = _b === void 0 ? true : _b;\n      var stack = _this.state.stack; // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n      // therefore they would not trigger the \"enter\" transition event as they were entered.\n      // To force the enter event, we want to change the key, but stack.length is not enough\n      // and a single panel should not rerender as long as it's hidden.\n      // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n      // second one, active changes only when the panel becomes or stops being active.\n\n      var layer = stack.length - index;\n      var key = renderActivePanelOnly ? stack.length : layer;\n      return React.createElement(CSSTransition, {\n        classNames: Classes.PANEL_STACK,\n        key: key,\n        timeout: 400\n      }, React.createElement(PanelView, {\n        onClose: _this.handlePanelClose,\n        onOpen: _this.handlePanelOpen,\n        panel: panel,\n        previousPanel: stack[index + 1],\n        showHeader: showPanelHeader\n      }));\n    };\n\n    _this.handlePanelClose = function (panel) {\n      var _a, _b;\n\n      var stack = _this.state.stack; // only remove this panel if it is at the top and not the only one.\n\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n\n      (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.slice(1)\n          };\n        });\n      }\n    };\n\n    _this.handlePanelOpen = function (panel) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: __spreadArray([panel], state.stack, true)\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState); // Always update local stack if stack prop changes\n\n\n    if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n      this.setState({\n        stack: this.props.stack.slice().reverse()\n      });\n    } // Only update animation direction if stack length changes\n\n\n    var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n    var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n\n    if (stackLength !== prevStackLength && prevProps.stack != null) {\n      this.setState({\n        direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\"\n      });\n    }\n  };\n\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, \"\".concat(Classes.PANEL_STACK, \"-\").concat(this.state.direction), this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderPanels());\n  };\n\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n\n    if (props.stack != null && props.stack.length === 0) {\n      console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n\n  PanelStack.prototype.renderPanels = function () {\n    var _a = this.props.renderActivePanelOnly,\n        renderActivePanelOnly = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n\n    if (stack.length === 0) {\n      return null;\n    }\n\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panelViews = panelsToRender.map(this.renderPanel).reverse();\n    return panelViews;\n  };\n\n  return PanelStack;\n}(AbstractPureComponent2);\n\nexport { PanelStack };","map":{"version":3,"mappings":"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","names":["classNames","React","CSSTransition","TransitionGroup","AbstractPureComponent2","Classes","Errors","PanelView","__extends","_this","direction","stack","props","slice","reverse","initialPanel","undefined","panel","index","renderActivePanelOnly","_b","showPanelHeader","state","layer","length","key","PANEL_STACK","timeout","onClose","handlePanelClose","onOpen","handlePanelOpen","previousPanel","showHeader","setState","PanelStack","prevProps","prevState","_super","componentDidUpdate","call","stackLength","prevStackLength","classes","concat","className","component","renderPanels","console","error","PANEL_STACK_INITIAL_PANEL_STACK_MUTEX","PANEL_STACK_REQUIRES_PANEL","_a","panelsToRender","panelViews","map","renderPanel"],"sourceRoot":"","sources":["../../../../src/components/panel-stack/panelStack.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}