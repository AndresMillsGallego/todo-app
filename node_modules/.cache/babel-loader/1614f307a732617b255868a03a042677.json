{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { IconSvgPaths16, IconSvgPaths20, iconNameToPathsRecordKey } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nexport var IconSize;\n\n(function (IconSize) {\n  IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n  IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  __extends(Icon, _super);\n\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Icon.prototype.render = function () {\n    var icon = this.props.icon;\n\n    if (icon == null || typeof icon === \"boolean\") {\n      return null;\n    } else if (typeof icon !== \"string\") {\n      return icon;\n    }\n\n    var _a = this.props,\n        className = _a.className,\n        color = _a.color,\n        htmlTitle = _a.htmlTitle,\n        // eslint-disable-next-line deprecation/deprecation\n    iconSize = _a.iconSize,\n        intent = _a.intent,\n        _b = _a.size,\n        size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b,\n        title = _a.title,\n        _c = _a.tagName,\n        tagName = _c === void 0 ? \"span\" : _c,\n        htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]); // choose which pixel grid is most appropriate for given icon size\n\n\n    var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD; // render path elements, or nothing if icon name is unknown.\n\n    var paths = this.renderSvgPaths(pixelGridSize, icon);\n    var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n    var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n    return React.createElement(tagName, __assign(__assign({}, htmlprops), {\n      \"aria-hidden\": title ? undefined : true,\n      className: classes,\n      title: htmlTitle\n    }), React.createElement(\"svg\", {\n      fill: color,\n      \"data-icon\": icon,\n      width: size,\n      height: size,\n      viewBox: viewBox\n    }, title && React.createElement(\"desc\", null, title), paths));\n  };\n  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n\n\n  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n    var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n    var paths = svgPathsRecord[iconNameToPathsRecordKey(iconName)];\n\n    if (paths == null) {\n      return null;\n    }\n\n    return paths.map(function (path, i) {\n      return React.createElement(\"path\", {\n        key: i,\n        d: path,\n        fillRule: \"evenodd\"\n      });\n    });\n  };\n\n  Icon.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Icon\");\n  return Icon;\n}(AbstractPureComponent2);\n\nexport { Icon };","map":{"version":3,"mappings":"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","names":["classNames","React","IconSvgPaths16","IconSvgPaths20","iconNameToPathsRecordKey","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","IconSize","__extends","Icon","props","icon","_a","className","color","htmlTitle","iconSize","intent","_b","size","STANDARD","title","_c","tagName","htmlprops","pixelGridSize","LARGE","paths","renderSvgPaths","classes","ICON","iconClass","intentClass","viewBox","concat","createElement","__assign","undefined","fill","width","height","pathsSize","iconName","svgPathsRecord","map","path","i","key","d","fillRule"],"sourceRoot":"","sources":["../../../../src/components/icon/icon.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}