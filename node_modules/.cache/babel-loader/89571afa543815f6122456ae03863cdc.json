{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2 } from \"../../components/hotkeys/hotkeysDialog2\";\nvar initialHotkeysState = {\n  hasProvider: false,\n  hotkeys: [],\n  isDialogOpen: false\n};\n\nvar noOpDispatch = function () {\n  return null;\n};\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * existing context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\n\n\nexport var HotkeysContext = React.createContext([initialHotkeysState, noOpDispatch]);\n\nvar hotkeysReducer = function (state, action) {\n  switch (action.type) {\n    case \"ADD_HOTKEYS\":\n      // only pick up unique hotkeys which haven't been registered already\n      var newUniqueHotkeys = [];\n\n      for (var _i = 0, _a = action.payload; _i < _a.length; _i++) {\n        var a = _a[_i];\n        var isUnique = true;\n\n        for (var _b = 0, _c = state.hotkeys; _b < _c.length; _b++) {\n          var b = _c[_b];\n          isUnique && (isUnique = !shallowCompareKeys(a, b, {\n            exclude: [\"onKeyDown\", \"onKeyUp\"]\n          }));\n        }\n\n        if (isUnique) {\n          newUniqueHotkeys.push(a);\n        }\n      }\n\n      return __assign(__assign({}, state), {\n        hotkeys: __spreadArray(__spreadArray([], state.hotkeys, true), newUniqueHotkeys, true)\n      });\n\n    case \"REMOVE_HOTKEYS\":\n      return __assign(__assign({}, state), {\n        hotkeys: state.hotkeys.filter(function (key) {\n          return action.payload.indexOf(key) === -1;\n        })\n      });\n\n    case \"OPEN_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: true\n      });\n\n    case \"CLOSE_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: false\n      });\n\n    default:\n      return state;\n  }\n};\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\n\n\nexport var HotkeysProvider = function (_a) {\n  var _b;\n\n  var children = _a.children,\n      dialogProps = _a.dialogProps,\n      renderDialog = _a.renderDialog,\n      value = _a.value;\n  var hasExistingContext = value != null;\n\n  var _c = value !== null && value !== void 0 ? value : React.useReducer(hotkeysReducer, __assign(__assign({}, initialHotkeysState), {\n    hasProvider: true\n  })),\n      state = _c[0],\n      dispatch = _c[1];\n\n  var handleDialogClose = React.useCallback(function () {\n    return dispatch({\n      type: \"CLOSE_DIALOG\"\n    });\n  }, []);\n  var dialog = (_b = renderDialog === null || renderDialog === void 0 ? void 0 : renderDialog(state, {\n    handleDialogClose: handleDialogClose\n  })) !== null && _b !== void 0 ? _b : React.createElement(HotkeysDialog2, __assign({}, dialogProps, {\n    isOpen: state.isDialogOpen,\n    hotkeys: state.hotkeys,\n    onClose: handleDialogClose\n  })); // if we are working with an existing context, we don't need to generate our own dialog\n\n  return React.createElement(HotkeysContext.Provider, {\n    value: [state, dispatch]\n  }, children, hasExistingContext ? undefined : dialog);\n};","map":{"version":3,"mappings":"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","names":["React","shallowCompareKeys","HotkeysDialog2","initialHotkeysState","hasProvider","hotkeys","isDialogOpen","noOpDispatch","HotkeysContext","createContext","hotkeysReducer","state","action","type","newUniqueHotkeys","payload","_i","a","isUnique","_b","b","exclude","push","filter","indexOf","key","HotkeysProvider","_a","children","dialogProps","renderDialog","value","hasExistingContext","useReducer","__assign","dispatch","handleDialogClose","useCallback","dialog","isOpen","onClose","Provider","undefined"],"sourceRoot":"","sources":["../../../../src/context/hotkeys/hotkeysProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}