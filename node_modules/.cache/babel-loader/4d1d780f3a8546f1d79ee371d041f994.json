{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/** `ResizeSensor` requires a single DOM element child and will error otherwise. */\n\nvar ResizeSensor =\n/** @class */\nfunction (_super) {\n  __extends(ResizeSensor, _super);\n\n  function ResizeSensor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = null;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n\n  ResizeSensor.prototype.render = function () {\n    // pass-through render of single child\n    return React.Children.only(this.props.children);\n  };\n\n  ResizeSensor.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n\n  ResizeSensor.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n\n  ResizeSensor.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n\n\n  ResizeSensor.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    var element = this.getElement();\n\n    if (!(element instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n\n    if (element === this.element && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect(); // remember element reference for next time\n\n      this.element = element;\n    } // observer callback is invoked immediately when observing new elements\n\n\n    this.observer.observe(element);\n\n    if (this.props.observeParents) {\n      var parent_1 = element.parentElement;\n\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n\n  ResizeSensor.prototype.getElement = function () {\n    try {\n      // using findDOMNode for two reasons:\n      // 1. cloning to insert a ref is unwieldy and not performant.\n      // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n\n      /* eslint-disable-next-line react/no-find-dom-node */\n      return findDOMNode(this);\n    } catch (_a) {\n      // swallow error if findDOMNode is run on unmounted component.\n      return null;\n    }\n  };\n\n  ResizeSensor.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ResizeSensor\");\n  return ResizeSensor;\n}(AbstractPureComponent2);\n\nexport { ResizeSensor };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,cAAT,QAAoD,yBAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AAmCA;;AACA;AAAA;AAAA;EAAkCC;;EAAlC;IAAA;;IAGYC,gBAA0B,IAA1B;IAEAA,iBAAW,IAAIN,cAAJ,CAAmB,mBAAO;MAAA;;MAAI,wBAAI,CAACO,KAAL,EAAWC,QAAX,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,YAAGC,OAAH,CAAnB;IAA8B,CAA5D,CAAX;;EAmEX;;EAjEUC,gCAAP;IACI;IACA,OAAOV,KAAK,CAACW,QAAN,CAAeC,IAAf,CAAoB,KAAKN,KAAL,CAAWO,QAA/B,CAAP;EACH,CAHM;;EAKAH,2CAAP;IACI,KAAKI,cAAL;EACH,CAFM;;EAIAJ,4CAAP,UAA0BK,SAA1B,EAAsD;IAClD,KAAKD,cAAL,CAAoB,KAAKR,KAAL,CAAWU,cAAX,KAA8BD,SAAS,CAACC,cAA5D;EACH,CAFM;;EAIAN,8CAAP;IACI,KAAKO,QAAL,CAAcC,UAAd;EACH,CAFM;EAIP;;;;;;;EAKQR,wCAAR,UAAuBS,KAAvB,EAAoC;IAAb;MAAAA;IAAa;;IAChC,IAAMC,OAAO,GAAG,KAAKC,UAAL,EAAhB;;IACA,IAAI,EAAED,OAAO,YAAYE,OAArB,CAAJ,EAAmC;MAC/B;MACA,KAAKL,QAAL,CAAcC,UAAd;MACA;IACH;;IAED,IAAIE,OAAO,KAAK,KAAKA,OAAjB,IAA4B,CAACD,KAAjC,EAAwC;MACpC;MACA;IACH,CAHD,MAGO;MACH;MACA,KAAKF,QAAL,CAAcC,UAAd,GAFG,CAGH;;MACA,KAAKE,OAAL,GAAeA,OAAf;IACH,CAhB+B,CAkBhC;;;IACA,KAAKH,QAAL,CAAcM,OAAd,CAAsBH,OAAtB;;IAEA,IAAI,KAAKd,KAAL,CAAWU,cAAf,EAA+B;MAC3B,IAAIQ,QAAM,GAAGJ,OAAO,CAACK,aAArB;;MACA,OAAOD,QAAM,IAAI,IAAjB,EAAuB;QACnB,KAAKP,QAAL,CAAcM,OAAd,CAAsBC,QAAtB;QACAA,QAAM,GAAGA,QAAM,CAACC,aAAhB;MACH;IACJ;EACJ,CA5BO;;EA8BAf,oCAAR;IACI,IAAI;MACA;MACA;MACA;MACA;;MACA;MACA,OAAOT,WAAW,CAAC,IAAD,CAAlB;IACH,CAPD,CAOE,WAAM;MACJ;MACA,OAAO,IAAP;IACH;EACJ,CAZO;;EA1DMS,2BAAc,UAAGP,kBAAH,EAAqB,eAArB,CAAd;EAuElB;AAAC,CAxED,CAAkCD,sBAAlC;;SAAaQ","names":["ResizeObserver","React","findDOMNode","AbstractPureComponent2","DISPLAYNAME_PREFIX","__extends","_this","props","onResize","_b","entries","ResizeSensor","Children","only","children","observeElement","prevProps","observeParents","observer","disconnect","force","element","getElement","Element","observe","parent_1","parentElement"],"sourceRoot":"","sources":["../../../../src/components/resize-sensor/resizeSensor.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}