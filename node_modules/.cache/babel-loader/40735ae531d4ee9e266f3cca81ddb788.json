{"ast":null,"code":"var _jsxFileName = \"/home/vallenato78/projects/courses/code401/todo-app/src/components/list/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { SettingsContext } from '../../context/settings';\nimport { OverflowList } from '@blueprintjs/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    list,\n    toggleComplete\n  } = _ref;\n  const settings = useContext(SettingsContext);\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(settings.itemsToDisplay);\n  const [results, setResults] = useState([]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(OverflowList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(List, \"XbhckDT8alWafH0kgsbCqbMzB+A=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useContext","useState","SettingsContext","OverflowList","List","list","toggleComplete","settings","start","setStart","end","setEnd","itemsToDisplay","results","setResults"],"sources":["/home/vallenato78/projects/courses/code401/todo-app/src/components/list/list.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { SettingsContext } from '../../context/settings';\nimport { OverflowList } from '@blueprintjs/core';\n\nconst List = ({ list, toggleComplete }) => {\n\n  const settings = useContext(SettingsContext);\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(settings.itemsToDisplay);\n  const [results, setResults] = useState([]);\n\n  \n\n  return (\n    <>\n      <OverflowList \n      />\n      {/* {list.map(item => (\n\n        <div key={item.id}>\n          <p>{item.text}</p>\n          <p><small>Assigned to: {item.assignee}</small></p>\n          <p><small>Difficulty: {item.difficulty}</small></p>\n          <div onClick={() => toggleComplete(item.id)}>Complete: {item.complete.toString()}</div>\n          <hr />\n        </div>\n\n      ))\n      } */}\n    </>\n  )\n}\n\nexport default List;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,YAAT,QAA6B,mBAA7B;;;;AAEA,MAAMC,IAAI,GAAG,QAA8B;EAAA;;EAAA,IAA7B;IAAEC,IAAF;IAAQC;EAAR,CAA6B;EAEzC,MAAMC,QAAQ,GAAGP,UAAU,CAACE,eAAD,CAA3B;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAACM,QAAQ,CAACK,cAAV,CAA9B;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;EAIA,oBACE;IAAA,uBACE,QAAC,YAAD;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAkBD,CA3BD;;GAAMG,I;;KAAAA,I;AA6BN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}